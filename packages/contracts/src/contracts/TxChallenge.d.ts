/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class TxChallenge extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): TxChallenge;
  methods: {
    CHALLENGE_LIMIT(): TransactionObject<string>;

    CHALLENGE_PERIOD(): TransactionObject<string>;

    MINIMUM_STAKE(): TransactionObject<string>;

    POOL_SIZE(): TransactionObject<string>;

    REF_DEPTH(): TransactionObject<string>;

    SUB_TREE_DEPTH(): TransactionObject<string>;

    SUB_TREE_SIZE(): TransactionObject<string>;

    challengeInclusion(
      txIndex: number | string,
      inflowIndex: number | string,
      arg2: string | number[]
    ): TransactionObject<void>;

    challengeTransaction(
      index: number | string,
      arg1: string | number[]
    ): TransactionObject<void>;

    challengeAtomicSwap(
      index: number | string,
      arg1: string | number[]
    ): TransactionObject<void>;

    challengeUsedNullifier(
      txIndex: number | string,
      inflowIndex: number | string,
      sibling: (string | number[])[],
      arg3: string | number[]
    ): TransactionObject<void>;

    challengeDuplicatedNullifier(
      nullifier: string | number[],
      arg1: string | number[]
    ): TransactionObject<void>;

    isValidRef(
      l2BlockHash: string | number[],
      ref: number | string
    ): TransactionObject<boolean>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
