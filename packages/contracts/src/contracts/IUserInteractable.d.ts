/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export type Deposit = ContractEventLog<{
  queuedAt: string
  note: string
  fee: string
  0: string
  1: string
  2: string
}>

export interface IUserInteractable extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): IUserInteractable
  clone(): IUserInteractable
  methods: {
    deposit(
      spendingPubKey: number | string | BN,
      salt: number | string | BN,
      eth: number | string | BN,
      token: string,
      amount: number | string | BN,
      nft: number | string | BN,
      fee: number | string | BN,
    ): PayableTransactionObject<void>

    withdraw(
      note: number | string | BN,
      owner: string,
      eth: number | string | BN,
      token: string,
      amount: number | string | BN,
      nft: number | string | BN,
      callerFee: number | string | BN,
      blockHash: string | number[],
      leafIndex: number | string | BN,
      siblings: (number | string | BN)[],
    ): NonPayableTransactionObject<void>

    payInAdvance(
      note: number | string | BN,
      owner: string,
      eth: number | string | BN,
      token: string,
      amount: number | string | BN,
      nft: number | string | BN,
      callerFee: number | string | BN,
      prepayFeeInEth: number | string | BN,
      prepayFeeInToken: number | string | BN,
      signature: string | number[],
    ): NonPayableTransactionObject<void>
  }
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
  }

  once(event: 'Deposit', cb: Callback<Deposit>): void
  once(event: 'Deposit', options: EventOptions, cb: Callback<Deposit>): void
}
