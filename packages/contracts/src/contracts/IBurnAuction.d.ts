/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export type NewHighBid = ContractEventLog<{
  roundIndex: string
  bidder: string
  amount: string
  0: string
  1: string
  2: string
}>
export type UrlUpdate = ContractEventLog<{
  coordinator: string
  0: string
}>

export interface IBurnAuction extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): IBurnAuction
  clone(): IBurnAuction
  methods: {
    startBlock(): NonPayableTransactionObject<string>

    roundLength(): NonPayableTransactionObject<string>

    minBid(): NonPayableTransactionObject<string>

    highestBidForRound(
      roundIndex: number | string | BN,
    ): NonPayableTransactionObject<{
      0: string
      1: string
    }>

    transferBalance(recipient: string): NonPayableTransactionObject<void>

    register(): PayableTransactionObject<void>

    setUrl(url: string): NonPayableTransactionObject<void>

    clearUrl(): NonPayableTransactionObject<void>

    earliestBiddableRound(): NonPayableTransactionObject<string>

    latestBiddableRound(): NonPayableTransactionObject<string>

    coordinatorUrls(url: string): NonPayableTransactionObject<string>

    'bid(uint256)'(
      roundIndex: number | string | BN,
    ): PayableTransactionObject<void>

    'bid(uint256,uint256)'(
      roundIndex: number | string | BN,
      amount: number | string | BN,
    ): NonPayableTransactionObject<void>

    multiBid(
      _minBid: number | string | BN,
      maxBid: number | string | BN,
      startRound: number | string | BN,
      endRound: number | string | BN,
    ): PayableTransactionObject<void>

    minNextBid(
      roundIndex: number | string | BN,
    ): NonPayableTransactionObject<string>

    calcRoundStart(
      roundIndex: number | string | BN,
    ): NonPayableTransactionObject<string>

    coordinatorForRound(
      roundIndex: number | string | BN,
    ): NonPayableTransactionObject<string>

    activeCoordinator(): NonPayableTransactionObject<string>

    currentRound(): NonPayableTransactionObject<string>

    shouldOpenRound(): NonPayableTransactionObject<boolean>

    isRoundOpen(): NonPayableTransactionObject<boolean>

    pendingBalances(owner: string): NonPayableTransactionObject<string>

    'refund()'(): NonPayableTransactionObject<void>

    'refund(address)'(owner: string): NonPayableTransactionObject<void>
  }
  events: {
    NewHighBid(cb?: Callback<NewHighBid>): EventEmitter
    NewHighBid(options?: EventOptions, cb?: Callback<NewHighBid>): EventEmitter

    UrlUpdate(cb?: Callback<UrlUpdate>): EventEmitter
    UrlUpdate(options?: EventOptions, cb?: Callback<UrlUpdate>): EventEmitter

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
  }

  once(event: 'NewHighBid', cb: Callback<NewHighBid>): void
  once(
    event: 'NewHighBid',
    options: EventOptions,
    cb: Callback<NewHighBid>,
  ): void

  once(event: 'UrlUpdate', cb: Callback<UrlUpdate>): void
  once(event: 'UrlUpdate', options: EventOptions, cb: Callback<UrlUpdate>): void
}
