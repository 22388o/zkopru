/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class DeserializationTester extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)
  clone(): DeserializationTester
  methods: {
    getProposer(arg0: string | number[]): TransactionObject<string>

    getProposer2(
      arg0: number | string,
      arg1: number | string,
      arg2: string | number[],
    ): TransactionObject<string>

    getParentBlock(arg0: string | number[]): TransactionObject<string>

    getParentBlock2(
      arg0: number | string,
      arg1: number | string,
      arg2: number | string,
      arg3: string | number[],
    ): TransactionObject<string>

    getUTXORollUp(
      arg0: string | number[],
    ): TransactionObject<{
      root: string
      index: string
      0: string
      1: string
    }>

    getNullifierRollUp(arg0: string | number[]): TransactionObject<string>

    getWithdrawalRollUp(
      arg0: string | number[],
    ): TransactionObject<{
      root: string
      index: string
      0: string
      1: string
    }>

    getTxRoot(arg0: string | number[]): TransactionObject<string>

    getMassDepositRoot(arg0: string | number[]): TransactionObject<string>

    getMassMigrationRoot(arg0: string | number[]): TransactionObject<string>

    getTxsLen(arg0: string | number[]): TransactionObject<string>

    getTxInflowLen(
      txIndex: number | string,
      arg1: string | number[],
    ): TransactionObject<string>

    getTxInflow(
      txIndex: number | string,
      inflowIndex: number | string,
      arg2: string | number[],
    ): TransactionObject<{
      inclusionRoot: string
      nullifier: string
      0: string
      1: string
    }>

    getTxOutflow(
      txIndex: number | string,
      outflowIndex: number | string,
      arg2: string | number[],
    ): TransactionObject<{
      note: string
      to: string
      eth: string
      token: string
      amount: string
      nft: string
      fee: string
      0: string
      1: string
      2: string
      3: string
      4: string
      5: string
      6: string
    }>

    getTxSwap(
      txIndex: number | string,
      arg1: string | number[],
    ): TransactionObject<string>

    getProof(
      txIndex: number | string,
      arg1: string | number[],
    ): TransactionObject<string[]>

    getTxFee(
      txIndex: number | string,
      arg1: string | number[],
    ): TransactionObject<string>

    getMassDepositsLen(arg0: string | number[]): TransactionObject<string>

    getMassDeposit(
      index: number | string,
      arg1: string | number[],
    ): TransactionObject<{
      merged: string
      fee: string
      0: string
      1: string
    }>

    getMassMigrationsLen(arg0: string | number[]): TransactionObject<string>

    getMassMigration(
      index: number | string,
      arg1: string | number[],
    ): TransactionObject<{
      destination: string
      totalETH: string
      merged: string
      fee: string
      0: string
      1: string
      2: string
      3: string
    }>

    getERC20Migration(
      index: number | string,
      erc20Index: number | string,
      arg2: string | number[],
    ): TransactionObject<{
      token: string
      amount: string
      0: string
      1: string
    }>

    getERC721Migration(
      index: number | string,
      erc721Index: number | string,
      arg2: string | number[],
    ): TransactionObject<{
      token: string
      nfts: string[]
      0: string
      1: string[]
    }>
  }
  events: {
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
