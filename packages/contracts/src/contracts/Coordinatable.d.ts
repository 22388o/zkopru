/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export type Finalized = ContractEventLog<{
  blockHash: string
  0: string
}>
export type MassDepositCommit = ContractEventLog<{
  index: string
  merged: string
  fee: string
  0: string
  1: string
  2: string
}>
export type NewErc20 = ContractEventLog<{
  tokenAddr: string
  0: string
}>
export type NewErc721 = ContractEventLog<{
  tokenAddr: string
  0: string
}>
export type NewProposal = ContractEventLog<{
  proposalNum: string
  blockHash: string
  0: string
  1: string
}>
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string
  newOwner: string
  0: string
  1: string
}>

export interface Coordinatable extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): Coordinatable
  clone(): Coordinatable
  methods: {
    CHALLENGE_PERIOD(): NonPayableTransactionObject<string>

    MAX_BLOCK_SIZE(): NonPayableTransactionObject<string>

    MAX_UTXO(): NonPayableTransactionObject<string>

    MAX_VALIDATION_GAS(): NonPayableTransactionObject<string>

    MAX_WITHDRAWAL(): NonPayableTransactionObject<string>

    MINIMUM_STAKE(): NonPayableTransactionObject<string>

    NULLIFIER_TREE_DEPTH(): NonPayableTransactionObject<string>

    REF_DEPTH(): NonPayableTransactionObject<string>

    UTXO_SUB_TREE_DEPTH(): NonPayableTransactionObject<string>

    UTXO_SUB_TREE_SIZE(): NonPayableTransactionObject<string>

    UTXO_TREE_DEPTH(): NonPayableTransactionObject<string>

    WITHDRAWAL_SUB_TREE_DEPTH(): NonPayableTransactionObject<string>

    WITHDRAWAL_SUB_TREE_SIZE(): NonPayableTransactionObject<string>

    WITHDRAWAL_TREE_DEPTH(): NonPayableTransactionObject<string>

    allowedMigrants(arg0: string): NonPayableTransactionObject<boolean>

    consensusProvider(): NonPayableTransactionObject<string>

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>

    proxied(arg0: string | number[]): NonPayableTransactionObject<string>

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>

    validators(arg0: string | number[]): NonPayableTransactionObject<string>

    /**
     * This function will be updated as the governance of Zkopru's been updated.         Currently Coordinator calls this function for the proof of stake.         Coordinator should pay more than MINIMUM_STAKE. See 'Configurated.sol'
     */
    register(): PayableTransactionObject<void>

    /**
     * Getter for determining if an address is staked for the rollup.*
     */
    isStaked(coordinator: string): NonPayableTransactionObject<boolean>

    stake(coordinator: string): PayableTransactionObject<void>

    /**
     * This function will be updated as the governance of Zkopru's been updated.
     */
    deregister(): NonPayableTransactionObject<void>

    /**
     * Coordinator proposes a new block using this function. propose() will freeze      the current mass deposit for the next block proposer, and will go through      CHALLENGE_PERIOD.
     * @param data Serialized newly minted block data
     */
    propose(data: string | number[]): NonPayableTransactionObject<void>

    /**
     * Coordinator can commit mass deposits. The pending deposits will be automatically      committed by propose() block. But to start the first propose() block, there      should be enough pending deposits, and the coordinator will commit them using      this standalone function.
     */
    commitMassDeposit(): NonPayableTransactionObject<void>

    /**
     * Coordinator can finalize a submitted block if it isn't slashed during the      challenge period. It updates the aggregated fee and withdrawal root.
     * @param  // Block data without tx details
     */
    finalize(arg0: string | number[]): NonPayableTransactionObject<void>

    /**
     * Coordinators can withdraw aggregated transaction fees.
     * @param amount Amount to withdraw.
     */
    withdrawReward(
      amount: number | string | BN,
    ): NonPayableTransactionObject<void>

    /**
     * Provide registered erc20 token information for decryption
     */
    registerERC20(tokenAddr: string): NonPayableTransactionObject<void>

    /**
     * Provide registered erc20 token information for decryption 1. verify erc721 token 2. governance to register the token address
     */
    registerERC721(tokenAddr: string): NonPayableTransactionObject<void>

    /**
     * You can override this function to implement your own consensus logic.
     * @param proposerAddr Coordinator address to check the allowance of block proposing.
     */
    isProposable(proposerAddr: string): NonPayableTransactionObject<boolean>
  }
  events: {
    Finalized(cb?: Callback<Finalized>): EventEmitter
    Finalized(options?: EventOptions, cb?: Callback<Finalized>): EventEmitter

    MassDepositCommit(cb?: Callback<MassDepositCommit>): EventEmitter
    MassDepositCommit(
      options?: EventOptions,
      cb?: Callback<MassDepositCommit>,
    ): EventEmitter

    NewErc20(cb?: Callback<NewErc20>): EventEmitter
    NewErc20(options?: EventOptions, cb?: Callback<NewErc20>): EventEmitter

    NewErc721(cb?: Callback<NewErc721>): EventEmitter
    NewErc721(options?: EventOptions, cb?: Callback<NewErc721>): EventEmitter

    NewProposal(cb?: Callback<NewProposal>): EventEmitter
    NewProposal(
      options?: EventOptions,
      cb?: Callback<NewProposal>,
    ): EventEmitter

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>,
    ): EventEmitter

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
  }

  once(event: 'Finalized', cb: Callback<Finalized>): void
  once(event: 'Finalized', options: EventOptions, cb: Callback<Finalized>): void

  once(event: 'MassDepositCommit', cb: Callback<MassDepositCommit>): void
  once(
    event: 'MassDepositCommit',
    options: EventOptions,
    cb: Callback<MassDepositCommit>,
  ): void

  once(event: 'NewErc20', cb: Callback<NewErc20>): void
  once(event: 'NewErc20', options: EventOptions, cb: Callback<NewErc20>): void

  once(event: 'NewErc721', cb: Callback<NewErc721>): void
  once(event: 'NewErc721', options: EventOptions, cb: Callback<NewErc721>): void

  once(event: 'NewProposal', cb: Callback<NewProposal>): void
  once(
    event: 'NewProposal',
    options: EventOptions,
    cb: Callback<NewProposal>,
  ): void

  once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
  once(
    event: 'OwnershipTransferred',
    options: EventOptions,
    cb: Callback<OwnershipTransferred>,
  ): void
}
