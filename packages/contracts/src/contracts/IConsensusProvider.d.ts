/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export interface IConsensusProvider extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): IConsensusProvider
  clone(): IConsensusProvider
  methods: {
    openRoundIfNeeded(): NonPayableTransactionObject<void>

    lockForUpgrade(
      roundIndex: number | string | BN,
    ): NonPayableTransactionObject<void>

    isProposable(proposer: string): NonPayableTransactionObject<boolean>
  }
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
  }
}
