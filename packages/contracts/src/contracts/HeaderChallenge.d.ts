/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export class HeaderChallenge extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions)
  clone(): HeaderChallenge
  methods: {
    CHALLENGE_LIMIT(): TransactionObject<string>

    CHALLENGE_PERIOD(): TransactionObject<string>

    MINIMUM_STAKE(): TransactionObject<string>

    POOL_SIZE(): TransactionObject<string>

    REF_DEPTH(): TransactionObject<string>

    SUB_TREE_DEPTH(): TransactionObject<string>

    SUB_TREE_SIZE(): TransactionObject<string>

    challengeDepositRoot(arg0: string | number[]): TransactionObject<void>

    challengTxRoot(arg0: string | number[]): TransactionObject<void>

    challengeMigrationRoot(arg0: string | number[]): TransactionObject<void>

    challengeTotalFee(arg0: string | number[]): TransactionObject<void>
  }
  events: {
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
