/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class RollUpChallenge extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): RollUpChallenge;
  methods: {
    CHALLENGE_LIMIT(): TransactionObject<string>;

    CHALLENGE_PERIOD(): TransactionObject<string>;

    MINIMUM_STAKE(): TransactionObject<string>;

    POOL_SIZE(): TransactionObject<string>;

    REF_DEPTH(): TransactionObject<string>;

    SUB_TREE_DEPTH(): TransactionObject<string>;

    SUB_TREE_SIZE(): TransactionObject<string>;

    challengeUTXORollUp(
      utxoRollUpId: number | string,
      _deposits: (number | string)[],
      numOfUTXOs: number | string,
      arg3: string | number[]
    ): TransactionObject<void>;

    challengeNullifierRollUp(
      nullifierRollUpId: number | string,
      numOfNullifiers: number | string,
      arg2: string | number[]
    ): TransactionObject<void>;

    challengeWithdrawalRollUp(
      withdrawalRollUpId: number | string,
      numOfWithdrawals: number | string,
      arg2: string | number[]
    ): TransactionObject<void>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
